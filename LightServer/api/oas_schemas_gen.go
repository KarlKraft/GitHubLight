// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"

	"github.com/go-faster/errors"
)

func (s *ErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// Ref: #/components/schemas/Error
type Error struct {
	Summary OptString `json:"summary"`
}

// GetSummary returns the value of Summary.
func (s *Error) GetSummary() OptString {
	return s.Summary
}

// SetSummary sets the value of Summary.
func (s *Error) SetSummary(val OptString) {
	s.Summary = val
}

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorStatusCode) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorStatusCode) SetResponse(val Error) {
	s.Response = val
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReportTupleSection returns new OptReportTupleSection with value set to v.
func NewOptReportTupleSection(v ReportTupleSection) OptReportTupleSection {
	return OptReportTupleSection{
		Value: v,
		Set:   true,
	}
}

// OptReportTupleSection is optional ReportTupleSection.
type OptReportTupleSection struct {
	Value ReportTupleSection
	Set   bool
}

// IsSet returns true if OptReportTupleSection was set.
func (o OptReportTupleSection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReportTupleSection) Reset() {
	var v ReportTupleSection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReportTupleSection) SetTo(v ReportTupleSection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReportTupleSection) Get() (v ReportTupleSection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReportTupleSection) Or(d ReportTupleSection) ReportTupleSection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/ReportTuple
type ReportTuple struct {
	Owner      OptString             `json:"owner"`
	Repository OptString             `json:"repository"`
	Section    OptReportTupleSection `json:"section"`
	Age        OptInt                `json:"age"`
}

// GetOwner returns the value of Owner.
func (s *ReportTuple) GetOwner() OptString {
	return s.Owner
}

// GetRepository returns the value of Repository.
func (s *ReportTuple) GetRepository() OptString {
	return s.Repository
}

// GetSection returns the value of Section.
func (s *ReportTuple) GetSection() OptReportTupleSection {
	return s.Section
}

// GetAge returns the value of Age.
func (s *ReportTuple) GetAge() OptInt {
	return s.Age
}

// SetOwner sets the value of Owner.
func (s *ReportTuple) SetOwner(val OptString) {
	s.Owner = val
}

// SetRepository sets the value of Repository.
func (s *ReportTuple) SetRepository(val OptString) {
	s.Repository = val
}

// SetSection sets the value of Section.
func (s *ReportTuple) SetSection(val OptReportTupleSection) {
	s.Section = val
}

// SetAge sets the value of Age.
func (s *ReportTuple) SetAge(val OptInt) {
	s.Age = val
}

type ReportTupleSection string

const (
	ReportTupleSectionReview ReportTupleSection = "review"
	ReportTupleSectionMerge  ReportTupleSection = "merge"
	ReportTupleSectionPull   ReportTupleSection = "pull"
)

// AllValues returns all ReportTupleSection values.
func (ReportTupleSection) AllValues() []ReportTupleSection {
	return []ReportTupleSection{
		ReportTupleSectionReview,
		ReportTupleSectionMerge,
		ReportTupleSectionPull,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ReportTupleSection) MarshalText() ([]byte, error) {
	switch s {
	case ReportTupleSectionReview:
		return []byte(s), nil
	case ReportTupleSectionMerge:
		return []byte(s), nil
	case ReportTupleSectionPull:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ReportTupleSection) UnmarshalText(data []byte) error {
	switch ReportTupleSection(data) {
	case ReportTupleSectionReview:
		*s = ReportTupleSectionReview
		return nil
	case ReportTupleSectionMerge:
		*s = ReportTupleSectionMerge
		return nil
	case ReportTupleSectionPull:
		*s = ReportTupleSectionPull
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type Reports []ReportsItem

// ReportsItem represents sum type.
type ReportsItem struct {
	Type        ReportsItemType // switch on this field
	ReportTuple ReportTuple
}

// ReportsItemType is oneOf type of ReportsItem.
type ReportsItemType string

// Possible values for ReportsItemType.
const (
	ReportTupleReportsItem ReportsItemType = "ReportTuple"
)

// IsReportTuple reports whether ReportsItem is ReportTuple.
func (s ReportsItem) IsReportTuple() bool { return s.Type == ReportTupleReportsItem }

// SetReportTuple sets ReportsItem to ReportTuple.
func (s *ReportsItem) SetReportTuple(v ReportTuple) {
	s.Type = ReportTupleReportsItem
	s.ReportTuple = v
}

// GetReportTuple returns ReportTuple and true boolean if ReportsItem is ReportTuple.
func (s ReportsItem) GetReportTuple() (v ReportTuple, ok bool) {
	if !s.IsReportTuple() {
		return v, false
	}
	return s.ReportTuple, true
}

// NewReportTupleReportsItem returns new ReportsItem from ReportTuple.
func NewReportTupleReportsItem(v ReportTuple) ReportsItem {
	var s ReportsItem
	s.SetReportTuple(v)
	return s
}

// Ref: #/components/schemas/Result
type Result struct {
	Summary OptString `json:"summary"`
}

// GetSummary returns the value of Summary.
func (s *Result) GetSummary() OptString {
	return s.Summary
}

// SetSummary sets the value of Summary.
func (s *Result) SetSummary(val OptString) {
	s.Summary = val
}
