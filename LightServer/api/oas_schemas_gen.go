// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"
	"io"
)

func (s *ErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// Ref: #/components/schemas/Error
type Error struct {
	Summary OptString `json:"summary"`
}

// GetSummary returns the value of Summary.
func (s *Error) GetSummary() OptString {
	return s.Summary
}

// SetSummary sets the value of Summary.
func (s *Error) SetSummary(val OptString) {
	s.Summary = val
}

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorStatusCode) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorStatusCode) SetResponse(val Error) {
	s.Response = val
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

type ReportPostOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ReportPostOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

type ReportPostReq struct {
	Owner      OptString `json:"owner"`
	Repository OptString `json:"repository"`
	Section    OptString `json:"section"`
	Age        OptInt    `json:"age"`
}

// GetOwner returns the value of Owner.
func (s *ReportPostReq) GetOwner() OptString {
	return s.Owner
}

// GetRepository returns the value of Repository.
func (s *ReportPostReq) GetRepository() OptString {
	return s.Repository
}

// GetSection returns the value of Section.
func (s *ReportPostReq) GetSection() OptString {
	return s.Section
}

// GetAge returns the value of Age.
func (s *ReportPostReq) GetAge() OptInt {
	return s.Age
}

// SetOwner sets the value of Owner.
func (s *ReportPostReq) SetOwner(val OptString) {
	s.Owner = val
}

// SetRepository sets the value of Repository.
func (s *ReportPostReq) SetRepository(val OptString) {
	s.Repository = val
}

// SetSection sets the value of Section.
func (s *ReportPostReq) SetSection(val OptString) {
	s.Section = val
}

// SetAge sets the value of Age.
func (s *ReportPostReq) SetAge(val OptInt) {
	s.Age = val
}
